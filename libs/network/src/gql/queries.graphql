mutation RegisterWithCredentials($registerWithCredentialsInput: RegisterWithCredentialsInput!) {
  registerWithCredentials(registerWithCredentialsInput: $registerWithCredentialsInput) {
    updatedAt
    uid
    name
    image
    createdAt
  }
}

query Companies($distinct: [CompanyScalarFieldEnum!], $where: CompanyWhereInput, $orderBy: [CompanyOrderByWithRelationInput!], $cursor: CompanyWhereUniqueInput, $take: Float, $skip: Float) {
  companies(distinct: $distinct, where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip) {
    createdAt
    description
    id
    displayName
    updatedAt
    managers {
      uid
    }
    garages {
      id
    }
  }
}

mutation Login($loginInput: LoginInput!) {
  login(loginInput: $loginInput) {
    token
    user {
      uid
      name
      image
    }
  }
}

query GetAuthProvider($uid: String!) {
  getAuthProvider(uid: $uid) {
    type
    uid
  }
}

mutation RegisterWithProvider($registerWithProviderInput: RegisterWithProviderInput!) {
  registerWithProvider(registerWithProviderInput: $registerWithProviderInput) {
    uid
  }
}

query SearchGarages($dateFilter: DateFilterInput!, $locationFilter: LocationFilterInput!, $slotsFilter: SlotWhereInput, $garageFilter: GarageFilter) {
  searchGarages(dateFilter: $dateFilter, locationFilter: $locationFilter, slotsFilter: $slotsFilter, garageFilter: $garageFilter) {
    id
    address {
      address
      lng
      lat
    }
    images
    displayName
    availableSlots(dateFilter: $dateFilter, slotsFilter: $slotsFilter) {
      type
      pricePerHour
      count
    }
    verification {
      verified
    }
  }
}

query myCompany {
  myCompany {
    id
    garages {
      displayName
      id
      description
      address {
        id
        address
        lat
        lng
      }
    }
    createdAt
    displayName
  }
}

mutation CreateCompany($createCompanyInput: CreateCompanyInput!) {
  createCompany(createCompanyInput: $createCompanyInput) {
    id
  }
}

query Garages($skip: Float, $take: Float, $cursor: GarageWhereUniqueInput, $orderBy: [GarageOrderByWithRelationInput!], $where: GarageWhereInput) {
  garages(skip: $skip, take: $take, cursor: $cursor, orderBy: $orderBy, where: $where) {
    id
    displayName
    description
    images
    verification {
      verified
    }
    address {
      lng
      lat
      id
      address
    }
    slotCounts {
      type
      count
    }
  }
  garagesCount(where:$where) {
  count
  }
}

mutation CreateGarage($createGarageInput: CreateGarageInput!) {
  createGarage(createGarageInput: $createGarageInput) {
    id
  }
}

mutation CreateManySlots($createSlotInput: CreateSlotInput!, $count: Float!) {
  createManySlots(createSlotInput: $createSlotInput, count: $count) {
    count
  }
}